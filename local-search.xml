<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计量笔记（面板）</title>
    <link href="/2021/12/14/%E8%AE%A1%E9%87%8F%E9%9D%A2%E6%9D%BF/"/>
    <url>/2021/12/14/%E8%AE%A1%E9%87%8F%E9%9D%A2%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>计量笔记4——面板模型</p><span id="more"></span><p>计量面板</p><h1 id="模型构成"><a href="#模型构成" class="headerlink" title="模型构成"></a>模型构成</h1><p>时间/个人的一些未观测到的，不会变化的特征+变化的系数+个人的随机扰动项</p><p>==为什么面板的常数项会发生改变，截面的模型就不会==</p><ol><li><p><del>常数项成了个体和时间的回归</del></p></li><li><p>两个因素，一是时间不同，二是个体不同</p><p>==那为什么截面数据个体也不同，但截距不发生变化==</p><p>那常数项就应该变化，面板的一个优点，就是一个人会出现很多次，这样就可以多观测到一部分随机扰动项了。对于截面，</p><ol><li>如果是有相关性的未观测到的解释变量，就变成内生性问题，</li><li>如果是无相关性的未观测到的解释变量，就会一起丢进随机扰动项</li></ol></li></ol><p>==为什么常数项是对不可观测的解释变量的线性组合==</p><p>线性是肯定的，虽然是线性，但仍然可以表达非线性的特征，即便是解释变量地系数会发生变化，也可以用交互效应/调节效应来线性表示</p><p>==如何无偏地估计固定效应==</p><ol><li><p>因为固定效应本质还是内生性，所以如果是截面数据，用正常办法是无法处理的，</p><ol><li><p>==内生性产生原因==</p><p>遗漏重要变量，</p><blockquote><p>平均吃一两饭就会胖一两，不是因为饭本身，而是吃一两饭还会吃二两肉来下饭，吃肉这个变量一旦被遗漏，就会得到荒谬的结论</p></blockquote><p>==如果遗漏变量可以被观测解释变量线性解释/完全独立会怎么样==</p><ol><li>如果线性解释，那遗漏变量就会不可观测，不会造成内生性</li><li>如果完全无关，就丢尽垃圾堆</li></ol><p>==那什么情况才会造成内生性==</p><p>$X^*=aX+bX^2+c$</p><p>应该只有$X^2$的这部分会导致内生性，那本质上和模型设定误差是一样的</p></li></ol></li><li><p>==为什么面板里可以无偏估计解释变量的系数==</p><p>同一个人的截距项是相同的，只要作差就可以把有内生性的部分去掉</p></li></ol><p><a href="https://liuhetian.github.io/2021/12/14/%E5%9B%BA%E5%AE%9A%E6%95%88%E5%BA%94%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%95%88%E5%BA%94%E7%9A%84%E5%8C%BA%E5%88%AB/">固定效应与随机效应的区别</a></p><h1 id="几种估计方法"><a href="#几种估计方法" class="headerlink" title="几种估计方法"></a>几种估计方法</h1><ol><li><p>混合最小二乘估计</p><p>思想最简单，就是当成混合效应来做，弊端是截距项带的随机变量，会自相关，所以RE会非有效，FE不必说，直接是有偏的</p></li><li><p>组内估计</p><!--为什么作差把截距去掉就能估计出解释变量的系数，或者说怎么保证截距不会变呢--><!--哦哦，好像是因为断面板，个人的变化不太大？--><p>如果承认同一个人的截距不会发生变化，那么确实可以估计出无偏一致的系数来。</p><p>同样会有非有效的问题，因为随机扰动项是$u_i-u_{it}$，一眼看出来自相关。</p><p>缺点1：没考虑组间的关系，导致无法估计个体的固有属性的系数</p></li><li><p>一阶差分</p><p>感觉和组内估计大同小异</p></li><li><p>使用虚拟变量的最小二乘估计$LSDV$，适用长面板</p><p>思想是认为每个人不同时刻的截距会发生变化，所以每个人会对应$t$个虚拟变量（不用减1，因为它就是截距，所以没有额外的截距项）</p><!--为什么是非有效的呢--></li><li><p>随机效应广义最小二乘估计</p></li><li><p>组间估计</p></li></ol><p>​      </p><p>​      </p>]]></content>
    
    
    
    <tags>
      
      <tag>上课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计量笔记（固定效应与随机效应的区别）</title>
    <link href="/2021/12/14/%E5%9B%BA%E5%AE%9A%E6%95%88%E5%BA%94%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%95%88%E5%BA%94%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/12/14/%E5%9B%BA%E5%AE%9A%E6%95%88%E5%BA%94%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%95%88%E5%BA%94%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>计量笔记——固定效应与随机效应</p><span id="more"></span><h1 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h1><p>固定效应</p><blockquote><p>固定效应模型中，每一个个体有一部分不随时间改变的不可观测的效应，如果这部分效应跟自变量相关，则是固定效应。例如，我想比较3种药物的疗效，我的目的就是为了比较这三种药的差别。这三种药不是从很多种药中抽样出来的，不能推广到其他的药物，结论仅限于这三种药。“固定”的含义正在于此，这三种药是固定的，不是随机选择的。此时这三种药的特征（自变量）与个体不可观测部分是相关的。</p></blockquote><p>随机效应</p><blockquote><p>随机效应模型中，个体不可观测效应与自变量无关。例如，你想知道是否名牌大学的<a href="https://www.zhihu.com/search?q=%E5%B0%B1%E4%B8%9A%E7%8E%87&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:46847046%7D">就业率</a>高于普通大学，你随机选择了北大、清华、<a href="https://www.zhihu.com/search?q=%E5%8C%97%E4%BA%AC%E5%B7%A5%E5%95%86%E5%A4%A7%E5%AD%A6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:46847046%7D">北京工商大学</a>、北京科技大学4所学校进行比较。你的结论不会仅限于这4所大学，而是要推广到名牌和普通这样的一个更广泛的范围。“随机”的含义就在于此，这4所学校是从名牌和普通大学中随机挑选出来的。此时这四所大学不可观测的个体特征也是随机的，与自变量无关。</p></blockquote><h1 id="为什么叫这个名字"><a href="#为什么叫这个名字" class="headerlink" title="为什么叫这个名字"></a>为什么叫这个名字</h1><p>固定是因为存在内生性，在这个人身上得到的结果只能用在这一个人身上，没办法推广，所以是指固定在一个人/个体上，是故意选的这个人，人是重点</p><p>后者是因为不存在内生性，结论可以推广，所以随机表示随机选的人，然后把结果推而广之。</p><p>混合效应是因为不同的人连截距都一样了，那么$t$时刻的$A$，$B$和不同时刻的$A_1$，$A_2$都是一样的，所有人都可以混在一起了？</p><h1 id="从公式上"><a href="#从公式上" class="headerlink" title="从公式上"></a>从公式上</h1><p>$a_i$和$X_i$的协方差是否为0</p>]]></content>
    
    
    
    <tags>
      
      <tag>上课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>奇怪的笑话</title>
    <link href="/2021/11/16/%E5%B8%88%E9%97%A8%E7%AC%91%E8%AF%9D/"/>
    <url>/2021/11/16/%E5%B8%88%E9%97%A8%E7%AC%91%E8%AF%9D/</url>
    
    <content type="html"><![CDATA[<p>奇怪的笑话</p><span id="more"></span><h1 id="魏文侯问扁鹊"><a href="#魏文侯问扁鹊" class="headerlink" title="魏文侯问扁鹊"></a>魏文侯问扁鹊</h1><blockquote><p>可帅问刘合天：“你们光华七子，哪个代码水平最高？”</p><p>刘合天说：“周总最好，成总其次，我最差。”</p><p>可帅甚为不解。</p><p>刘合天解释道：“我周总不等Bug出现就提前预防了，所以名声传不出开发组。成总在Bug出现时顺手解决了，所以名声传不出技术部。我呢，每天像打地鼠一样到处救火，所以在班里没人不知道我。”</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>莫名其妙的小玩意</title>
    <link href="/2021/11/14/Python%E8%8E%AB%E5%90%8D%E5%85%B6%E5%A6%99%E7%9A%84%E5%B0%8F%E7%8E%A9%E6%84%8F/"/>
    <url>/2021/11/14/Python%E8%8E%AB%E5%90%8D%E5%85%B6%E5%A6%99%E7%9A%84%E5%B0%8F%E7%8E%A9%E6%84%8F/</url>
    
    <content type="html"><![CDATA[<p>x学</p><span id="more"></span><h1 id="解决查字典不存在key报错的问题"><a href="#解决查字典不存在key报错的问题" class="headerlink" title="解决查字典不存在key报错的问题"></a>解决查字典不存在key报错的问题</h1><ol><li>用adict.get(akey,default_return)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#125;</span><br><span class="line">a.get(<span class="number">0</span>,<span class="number">1</span>) <span class="comment">#1</span></span><br></pre></td></tr></table></figure><ol start="2"><li>用一个默认字典</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">a = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">a[<span class="number">5</span>] <span class="comment">#0 #会帮你自动创建</span></span><br></pre></td></tr></table></figure><h1 id="字符串的骚操作"><a href="#字符串的骚操作" class="headerlink" title="字符串的骚操作"></a>字符串的骚操作</h1><p>检测以什么开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">astr.startswith(prefix)</span><br></pre></td></tr></table></figure><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>完全二叉树的一种，分为大根和小根，区别就是头是最大的还是最小的。感觉只有找最大值，最小值才有用。</p><h1 id="Jupyter-Notebook-插件"><a href="#Jupyter-Notebook-插件" class="headerlink" title="Jupyter Notebook 插件"></a><a href="https://zhuanlan.zhihu.com/p/97394628">Jupyter Notebook 插件</a></h1><h1 id="Jupyter-Notebook-导出没有代码的html"><a href="#Jupyter-Notebook-导出没有代码的html" class="headerlink" title="Jupyter Notebook 导出没有代码的html"></a>Jupyter Notebook 导出没有代码的html</h1><p>jupyter nbconvert –to html –no-input C:/Users/A/Desktop/画图/a.ipynb</p><p>早知道就不用慢慢删除了，很呆</p><h1 id="Jupyter-Notebook-显示完整的dataframe"><a href="#Jupyter-Notebook-显示完整的dataframe" class="headerlink" title="Jupyter Notebook 显示完整的dataframe"></a>Jupyter Notebook 显示完整的dataframe</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">&quot;all&quot;</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line">df</span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure><h1 id="Jupyter-Notebook-内运行py文件"><a href="#Jupyter-Notebook-内运行py文件" class="headerlink" title="Jupyter Notebook 内运行py文件"></a>Jupyter Notebook 内运行py文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%run fool.py</span><br></pre></td></tr></table></figure><h1 id="Notebook-内放歌"><a href="#Notebook-内放歌" class="headerlink" title="Notebook 内放歌"></a>Notebook 内放歌</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from IPython.display import HTML</span><br><span class="line">HTML(&#x27;<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=28285910&amp;auto=1&amp;height=66&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span>&#x27;)</span><br></pre></td></tr></table></figure><h1 id="Notebook-彩色背景"><a href="#Notebook-彩色背景" class="headerlink" title="Notebook 彩色背景"></a>Notebook 彩色背景</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-block alert-info&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Tip:<span class="tag">&lt;/<span class="name">b</span>&gt;</span> Use blue boxes (alert-info) for tips and notes. </span><br><span class="line">If it’s a note, you don’t have to include the word “Note”.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="显示多个输出"><a href="#显示多个输出" class="headerlink" title="显示多个输出"></a>显示多个输出</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">&quot;all&quot;</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line">df</span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure><p><a href="http://192.168.72.128:8888/">http://192.168.72.128:8888/</a></p><p><a href="http://127.0.0.1:8888/">http://127.0.0.1:8888/</a></p><p>jupyter notebook –generate-config</p><p>C:\Users\A.jupyter\jupyter_notebook_config.py</p><p>from notebook.auth import passwd</p><p>passwd()</p><p>‘argon2:$argon2id$v=19$m=10240,t=10,p=8$7HWMKAQhaDqRtQ4rTKMJ3Q$nT5KLyLCQn5ctYVXtjqEmw’</p><p>c.NotebookApp.ip=’*’<br>c.NotebookApp.password = u’argon2:$argon2id$v=19$m=10240,t=10,p=8$7HWMKAQhaDqRtQ4rTKMJ3Q$nT5KLyLCQn5ctYVXtjqEmw’<br>c.NotebookApp.open_browser = True<br>c.NotebookApp.port =8888</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对偶函数是凹函数</title>
    <link href="/2021/11/13/%E5%AF%B9%E5%81%B6%E5%87%BD%E6%95%B0%E6%98%AF%E5%87%B9%E5%87%BD%E6%95%B0/"/>
    <url>/2021/11/13/%E5%AF%B9%E5%81%B6%E5%87%BD%E6%95%B0%E6%98%AF%E5%87%B9%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>通拉格朗日函数的意义，不光是从KKT来，还有它是一个凹函数，这是一个完美的结论</p><span id="more"></span><h1 id="记号"><a href="#记号" class="headerlink" title="记号"></a>记号</h1><p>原问题$(P)$为<br>$$<br>min\ f(x)<br>$$<br>$$<br>s.t.\ \ g_i(x) \leq 0<br>$$<br>$$<br>h_i(x)=0<br>$$<br>对偶问题$(D)$为<br>$$<br>\mathop{max}\limits_{\lambda,\mu} \ \mathop{min}\limits_x\ f(x)+\sum \lambda_ig_i(x)+\sum \mu_ih(x)<br>$$<br>记对偶函数$d(\lambda,\mu)=\mathop{min}\limits_x\ f(x)+\sum \lambda_ig_i(x)+\sum \mu_ih(x)$，则对偶问题为$\mathop{max}\limits_{\lambda,\mu}\ d(\lambda,\mu)$</p><h1 id="证明对偶函数是凹函数"><a href="#证明对偶函数是凹函数" class="headerlink" title="证明对偶函数是凹函数"></a>证明对偶函数是凹函数</h1><p>将对偶函数$d(\lambda,\mu)$为$d(\gamma)$，将拉格朗日函数$L(x,\lambda,\mu)$记作$L(x,\gamma)$</p><p>不妨令<br>$$<br>d(\gamma_1)=L(x_1,\gamma_1)\<br>$$<br>$$<br>d(\gamma_2)=L(x_2,\gamma_2)\<br>$$<br>$$<br>d(\theta\gamma_1+(1-\theta)\gamma_2) = L(x_3,\theta\gamma_1+(1-\theta)\gamma_2)<br>$$</p><p>由于拉格朗日函数一旦固定住$x$，就会变成$\gamma$的仿射函数，可得<br>$$<br>d(\theta\gamma_1+(1-\theta)\gamma_2) = \theta L(x_3,\gamma_1)+(1-\theta)L(x_3,\gamma_2)<br>$$<br>根据定义<br>$$<br>L(x_3,\gamma_1)&gt;L(x_1,\gamma_1)=d(\gamma_1)<br>$$<br>$$<br>L(x_3,\gamma_2)&gt;L(x_2,\gamma_2)=d(\gamma_2)<br>$$<br>可得<br>$$<br>d(\theta\gamma_1+(1-\theta)\gamma_2)&gt;\theta d(\gamma_1)+(1-\theta)d(\gamma_2)<br>$$<br>得证。</p><h1 id="图像解释"><a href="#图像解释" class="headerlink" title="图像解释"></a>图像解释</h1><p><img src="/images/%E5%AF%B9%E5%81%B6%E5%87%B9%E5%87%BD%E6%95%B0.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PCA与SVD</title>
    <link href="/2021/11/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0PCA%E4%B8%8ESVD/"/>
    <url>/2021/11/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0PCA%E4%B8%8ESVD/</url>
    
    <content type="html"><![CDATA[<p>通过得到一个近似的矩阵，得到大幅减少行向量的维度</p><span id="more"></span><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>$A^TA$一定是对称的，所以它可以对角化，$A^TA=Q\Lambda Q^T$，这里有一个理解方式，他就会变成很多个$\lambda qq^T$的和，每个的秩都是1。</p><p>$R(A^TA)=R(A)$，因为齐次方程同解。</p><p>$A^TA$半正定，因为左右乘上$x$很容易发现是一个平方和。</p><p>$A^TA$与$AA^T$同特征值，因为$(A^TA)A^Tx=\lambda A^Tx$</p><h1 id="PCA的思想"><a href="#PCA的思想" class="headerlink" title="PCA的思想"></a>PCA的思想</h1><p>对原矩阵$X$进行一些列变化得到$X’=XQ$。列变化是可逆的，不会损失信息，这个思想和和共线性有点像，有相关性就说明列之间有相同的信息，或者说就是构造出了新的特征。好处是可以有效解决特征（列向量）之间的相关性。</p><p>协方差矩阵等于$X^TX$（这里的$X$是减去了均值的），那么$X’$的协方差矩阵就等于$Q^TX^TXQ$，那么答案就呼之欲出了，$Q$就是那个正交向量。</p><h1 id="SVD的思想"><a href="#SVD的思想" class="headerlink" title="SVD的思想"></a>SVD的思想</h1><p>$A$是一个特别稀疏的矩阵，一定找得到正交矩阵$U,V$使得$AV=U\Lambda$，</p>]]></content>
    
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《Python一行流》笔记</title>
    <link href="/2021/11/06/Python%E4%B8%80%E8%A1%8C%E6%B5%81/"/>
    <url>/2021/11/06/Python%E4%B8%80%E8%A1%8C%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<p>增加行数并不会增加可读性<br>不如多一行备注，少一行代码</p><span id="more"></span><h1 id="经典的快速排序"><a href="#经典的快速排序" class="headerlink" title="经典的快速排序"></a>经典的快速排序</h1><p>在lambda函数里进行递归，根本不是人，基本结构是将一个列表拆成比第一个元素小的和比第一个元素大的两个列表，两个列表分别排序之后，拼在一起</p><ol><li>思路是拆成两个部分，但其实是三个列表相加，这样可以保证每一次都有变化</li><li>这个终止条件在列表循环里也经常用</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> a:f([i <span class="keyword">for</span> i <span class="keyword">in</span> a[<span class="number">1</span>:] <span class="keyword">if</span> i&lt;=a[<span class="number">0</span>]])+\</span><br><span class="line">                [a[<span class="number">0</span>]]+\</span><br><span class="line">                f([i <span class="keyword">for</span> i <span class="keyword">in</span> a[<span class="number">1</span>:] <span class="keyword">if</span> i &gt; a[<span class="number">0</span>]]) <span class="keyword">if</span> a <span class="keyword">else</span> []</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">f(a)</span><br></pre></td></tr></table></figure><pre><code>[1, 1, 2, 2, 3, 4]</code></pre><h1 id="一行代码求质数"><a href="#一行代码求质数" class="headerlink" title="一行代码求质数"></a>一行代码求质数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">100</span>) <span class="keyword">if</span> <span class="built_in">all</span>([i%j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,i)])])</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t1 = time.time()</span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>**<span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">all</span>([i%j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,i)])]</span><br><span class="line">time.time()-t1</span><br></pre></td></tr></table></figure><pre><code>[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]265.7324070930481</code></pre><p>但是效率低了，所以用下面的方法</p><p>即便是有Bug的标注法，效率都贼高，不知道为什么</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t1 = time.time()</span><br><span class="line">a = &#123;i:<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>**<span class="number">5</span>)&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>**<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i**<span class="number">2</span>,<span class="number">10</span>**<span class="number">5</span>,i):</span><br><span class="line">        a[j] = <span class="number">0</span></span><br><span class="line">[i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> a.items() <span class="keyword">if</span> i[<span class="number">1</span>]]</span><br><span class="line">time.time()-t1</span><br></pre></td></tr></table></figure><pre><code>0.08522939682006836</code></pre><p>最好的办法，一亿46秒就能算出来，但空间占用贼大</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t1 = time.time()</span><br><span class="line">a = &#123;i:<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>**<span class="number">5</span>)&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>**<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> a[i] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i**<span class="number">2</span>,<span class="number">10</span>**<span class="number">5</span>,i):</span><br><span class="line">            a[j] = <span class="number">0</span></span><br><span class="line">[i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> a.items() <span class="keyword">if</span> i[<span class="number">1</span>]]</span><br><span class="line">time.time()-t1</span><br></pre></td></tr></table></figure><pre><code>0.037007808685302734</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t1 = time.time()</span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>**<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">if</span> i%j == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a.append(i)</span><br><span class="line">time.time()-t1</span><br></pre></td></tr></table></figure><pre><code>3.0065903663635254</code></pre><h1 id="筛选字典"><a href="#筛选字典" class="headerlink" title="筛选字典"></a>筛选字典</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>:<span class="number">2</span>, <span class="number">2</span>:<span class="number">3</span>, <span class="number">4</span>:<span class="number">5</span>&#125;</span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> a.items() <span class="keyword">if</span> i[<span class="number">1</span>] &gt; <span class="number">2</span>]</span><br></pre></td></tr></table></figure><pre><code>[(2, 3), (4, 5)]</code></pre><h1 id="两种筛选"><a href="#两种筛选" class="headerlink" title="两种筛选"></a>两种筛选</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>) <span class="keyword">if</span> i%<span class="number">2</span>])</span><br></pre></td></tr></table></figure><pre><code>[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]</code></pre><p>但是这样写就不行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>([i <span class="keyword">if</span> i%<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)])</span><br></pre></td></tr></table></figure><pre><code>  File &quot;&lt;ipython-input-8-8a8d1e297050&gt;&quot;, line 1    print([i if i%2 for i in range(100)])                    ^SyntaxError: invalid syntax</code></pre><p>但是可以转换成这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>([i <span class="keyword">if</span> i%<span class="number">2</span> <span class="keyword">else</span> <span class="string">&#x27;偶数&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)])</span><br></pre></td></tr></table></figure><pre><code>[&#39;偶数&#39;, 1, &#39;偶数&#39;, 3, &#39;偶数&#39;, 5, &#39;偶数&#39;, 7, &#39;偶数&#39;, 9, &#39;偶数&#39;, 11, &#39;偶数&#39;, 13, &#39;偶数&#39;, 15, &#39;偶数&#39;, 17, &#39;偶数&#39;, 19, &#39;偶数&#39;, 21, &#39;偶数&#39;, 23, &#39;偶数&#39;, 25, &#39;偶数&#39;, 27, &#39;偶数&#39;, 29, &#39;偶数&#39;, 31, &#39;偶数&#39;, 33, &#39;偶数&#39;, 35, &#39;偶数&#39;, 37, &#39;偶数&#39;, 39, &#39;偶数&#39;, 41, &#39;偶数&#39;, 43, &#39;偶数&#39;, 45, &#39;偶数&#39;, 47, &#39;偶数&#39;, 49, &#39;偶数&#39;, 51, &#39;偶数&#39;, 53, &#39;偶数&#39;, 55, &#39;偶数&#39;, 57, &#39;偶数&#39;, 59, &#39;偶数&#39;, 61, &#39;偶数&#39;, 63, &#39;偶数&#39;, 65, &#39;偶数&#39;, 67, &#39;偶数&#39;, 69, &#39;偶数&#39;, 71, &#39;偶数&#39;, 73, &#39;偶数&#39;, 75, &#39;偶数&#39;, 77, &#39;偶数&#39;, 79, &#39;偶数&#39;, 81, &#39;偶数&#39;, 83, &#39;偶数&#39;, 85, &#39;偶数&#39;, 87, &#39;偶数&#39;, 89, &#39;偶数&#39;, 91, &#39;偶数&#39;, 93, &#39;偶数&#39;, 95, &#39;偶数&#39;, 97, &#39;偶数&#39;, 99]</code></pre><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>肯定是查找有序数列。如果长度是奇数，取中间刚好回事中间，5//2=2，如果是偶数，会取到中间靠右</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">23</span>,<span class="number">43</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">1</span>] <span class="comment">#a[1.0]会报错</span></span><br></pre></td></tr></table></figure><pre><code>3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="number">1.7</span>) <span class="comment">#int也是地板</span></span><br></pre></td></tr></table></figure><pre><code>1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">10</span>]</span><br><span class="line">f = <span class="keyword">lambda</span> b: <span class="number">0</span> <span class="keyword">if</span> <span class="built_in">len</span>(b) == <span class="number">1</span> <span class="keyword">else</span> f(b[:<span class="built_in">int</span>(<span class="built_in">len</span>(b)/<span class="number">2</span>)]) <span class="keyword">if</span> a&lt;b[<span class="built_in">int</span>(<span class="built_in">len</span>(b)/<span class="number">2</span>)] <span class="keyword">else</span> <span class="built_in">int</span>(<span class="built_in">len</span>(b)/<span class="number">2</span>)+f(b[<span class="built_in">int</span>(<span class="built_in">len</span>(b)/<span class="number">2</span>):])</span><br><span class="line">f(b)</span><br></pre></td></tr></table></figure><pre><code>2</code></pre><h1 id="斐波拉契"><a href="#斐波拉契" class="headerlink" title="斐波拉契"></a>斐波拉契</h1><p>孤儿写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>]+[a.append(a[-<span class="number">1</span>]+a[-<span class="number">2</span>]) <span class="keyword">or</span> a[-<span class="number">1</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure><pre><code>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</code></pre><p>正常人写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">[a.append(a[-<span class="number">1</span>]+a[-<span class="number">2</span>]) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逻辑回归DNN</title>
    <link href="/2021/11/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92DNN/"/>
    <url>/2021/11/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92DNN/</url>
    
    <content type="html"><![CDATA[<p>通反向传播神经网络，写了一个月吧，矩阵编程真的美妙，可惜还不知道怎么能一定让它收敛到全局最小</p><span id="more"></span><h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Logic</span>(<span class="params">data,alpha=<span class="number">0.03</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#先准备数据，最后一列是Y，data的每一行是一个样本点/个体</span></span><br><span class="line">    X = data[:,:-<span class="number">1</span>]</span><br><span class="line">    m,n = X.shape</span><br><span class="line">    Y = data[:,-<span class="number">1</span>].reshape(m,<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#W,b两个参数先先随机生成</span></span><br><span class="line">    W = np.random.randn(n,<span class="number">1</span>)</span><br><span class="line">    b = np.random.rand()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        <span class="comment">#正向传播</span></span><br><span class="line">        Z = X.dot(W) + b</span><br><span class="line">        Y_hat = <span class="number">1</span>/(<span class="number">1</span>+np.e**(-Z))</span><br><span class="line">        <span class="comment">#传播最后计算损失函数</span></span><br><span class="line">        L = -(Y*np.log(Y_hat)+(<span class="number">1</span>-Y)*np.log(<span class="number">1</span>-Y_hat))</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(L.<span class="built_in">sum</span>())</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#反向传播</span></span><br><span class="line">        dY_hat = -Y/Y_hat + (<span class="number">1</span>-Y)/(<span class="number">1</span>-Y_hat)</span><br><span class="line">        dZ = Y_hat * (<span class="number">1</span> - Y_hat) * dY_hat</span><br><span class="line">        db = dZ.<span class="built_in">sum</span>()</span><br><span class="line">        dW = X.T.dot(dY_hat)</span><br><span class="line">        </span><br><span class="line">        b -= alpha*db</span><br><span class="line">        W -= alpha*dW</span><br><span class="line">        </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X = np.random.rand(<span class="number">10</span>,<span class="number">5</span>)</span><br><span class="line">Logic(X)</span><br></pre></td></tr></table></figure><pre><code>7.40488348451045656.4276417028873926.43063740345220056.4308151997621796.4308264749657756.4308271951479816.4308272411817616.4308272441244336.43082724431254256.4308272443245675</code></pre><p>损失函数是正的还是负的哦==</p><h1 id="DNN"><a href="#DNN" class="headerlink" title="DNN"></a>DNN</h1><p>懒得写一层的，直接n层</p><h2 id="损失函数L"><a href="#损失函数L" class="headerlink" title="损失函数L"></a>损失函数L</h2><p>极大似然估计法：<br>$$<br>L = \prod_{Y_i = 1 }(P_i)\ \times \ \prod_{Y_j = 0 }(1-P_j)  \<br>$$<br>$$<br>L = \prod P_i^{Y_i}(1-P_i)^{1-Y_i} \<br>$$<br>$$<br>lnL = \sum (Y_ilnP_i + (1-Y_i)ln(1-P_i))<br>$$<br>要让上面的似然函数最大，也就是说要让下面的损失函数最小<br>$$<br>Loss = -\sum (Y_ilnP_i + (1-Y_i)ln(1-P_i))<br>$$</p><h2 id="正向传播"><a href="#正向传播" class="headerlink" title="正向传播"></a>正向传播</h2><p>先有矩阵$X_{m\times n},Y_{m\times 1}$ <br/><br>假设有n个隐藏层<br/><br>$$<br>X_{m \times n} \times W_{1(n \times p_1)} + b_1 = Z_1;A_1 = ReLU(Z_1)\<br>$$<br>$$<br>A_{1(m \times p_1)} \times W_{2(p_1 \times p_2)} + b_2 = Z_2;A_2 = ReLU(Z_2)\<br>$$<br>$$<br>A_{2(m \times p_2)} \times W_{3(p_2 \times p_3)} + b_3 = Z_3;A_3 = ReLU(Z_3)\<br>$$<br>$$<br>….\<br>$$<br>$$<br>A_{n-1} \times W_{n(p_{n-1}\ \times p_n)} + b_n = Z_n;A_n = ReLU(Z_n)\<br>$$<br>$$<br>A_n \times W_{n+1(p_n\ \times 1)} + b_{n+1} = Z_{n+1};A_{n+1} = sigmoid(Z_{n+1})<br>$$<br>输入n个隐藏层的参数，就会有n+1个W，Z，如果X视为$A_0$的话，一共会有n+2个A</p><h2 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h2><p>先对$\hat Y$求导<br>$$<br>\frac {\partial lnL}{\partial P} = \sum (\frac {Y_i}{P_i} + \frac {1-Y_i}{1-P_i})<br>$$<br>然后$\hat Y$对$Z_{n+1}$求导<br>$$<br>\frac {\partial \hat Y}{\partial Z_{n+1}} = \hat Y \times (1-\hat Y)\<br>$$<br>$$<br>db_t = dA_{t+1}.sum().sum()<br>$$<br>$$<br>dW_t = A_t.T.dot(dA_{t+1})\<br>$$<br>$$<br>dA_t = dA_{t+1}.dot(dW_t.T)<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DNN</span>(<span class="params">data, layers</span>):</span></span><br><span class="line">    <span class="comment">#步长</span></span><br><span class="line">    alpha = <span class="number">0.003</span></span><br><span class="line"></span><br><span class="line">    X = data[:,:-<span class="number">1</span>]</span><br><span class="line">    m,n = X.shape <span class="comment">#m代表有多少条记录/元组，n代表有多少个特征</span></span><br><span class="line">    Y = data[:,-<span class="number">1</span>].reshape(m,<span class="number">1</span>) <span class="comment">#不reshape的话，Y就会没有形状，是个向量而不是矩阵</span></span><br><span class="line"></span><br><span class="line">    many = <span class="built_in">len</span>(layers)+<span class="number">1</span> <span class="comment">#有多少层</span></span><br><span class="line">    layers.append(<span class="number">1</span>) <span class="comment">#最后一个W一定是列向量</span></span><br><span class="line">    layers.insert(<span class="number">0</span>,n) <span class="comment">#第一个W的宽度一定等于n，才能和X对齐</span></span><br><span class="line">    Ws, bs = [], []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(many): <span class="comment">#W的矩阵，形状分别是n*p1, p1*p2, p2*p3....pn*1</span></span><br><span class="line">        Ws.append(np.random.randn(layers[i],layers[i+<span class="number">1</span>]))</span><br><span class="line">        bs.append(np.random.randn())</span><br><span class="line"></span><br><span class="line">    <span class="comment">#程序主体，开始循环</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#正向传播</span></span><br><span class="line">        As = [X]</span><br><span class="line">        Zs = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(many):         </span><br><span class="line">            Z = As[-<span class="number">1</span>].dot(Ws[j])+bs[j]</span><br><span class="line">            Zs.append(Z)</span><br><span class="line">            <span class="keyword">if</span> j != many-<span class="number">1</span>:<span class="comment">#是中间层</span></span><br><span class="line">                <span class="comment">#进行ReLU</span></span><br><span class="line">                A = Z.copy()</span><br><span class="line">                A[A&lt;<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment">#进行sigmoid</span></span><br><span class="line">                A = <span class="number">1</span>/(<span class="number">1</span>+np.e**(-Z))</span><br><span class="line">            As.append(A)     </span><br><span class="line">        Loss = -Y*np.log(A)-(<span class="number">1</span>-Y)*np.log(<span class="number">1</span>-A)<span class="comment">#最后这个A就是Y_hat</span></span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(Loss.<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line">        <span class="comment">#反向传播</span></span><br><span class="line">        dY_hat = - Y/A + (<span class="number">1</span>-Y)/(<span class="number">1</span>-A) <span class="comment">#先对Y_hat求导</span></span><br><span class="line">        dZ_hat = A*(<span class="number">1</span>-A)*dY_hat</span><br><span class="line">        </span><br><span class="line">        dAs = [dY_hat]</span><br><span class="line">        dZs = [dZ_hat]</span><br><span class="line">        dWs = []</span><br><span class="line">        dbs = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(many-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):                     </span><br><span class="line">            A_t = As[j]<span class="comment">#先找到这一层对应的W和b</span></span><br><span class="line">            W_t = Ws[j]</span><br><span class="line">            Z_t = Zs[j]</span><br><span class="line">            </span><br><span class="line">            db = dZs[-<span class="number">1</span>].<span class="built_in">sum</span>().<span class="built_in">sum</span>() <span class="comment">#第j层b的导数</span></span><br><span class="line">            dbs.append(db)</span><br><span class="line">            dW = A_t.T.dot(dZs[-<span class="number">1</span>])</span><br><span class="line">            dWs.append(dW)</span><br><span class="line">            dA = dZs[-<span class="number">1</span>].dot(W_t.T)</span><br><span class="line">            dAs.append(dA)</span><br><span class="line">            <span class="comment">#为上一层做铺垫</span></span><br><span class="line">            <span class="keyword">if</span> j != <span class="number">0</span>:</span><br><span class="line">                dZ = dA.copy()</span><br><span class="line">                Z_shang = Zs[j-<span class="number">1</span>]</span><br><span class="line">                dZ[Z_shang&lt;<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">                dZs.append(dZ)</span><br><span class="line">            </span><br><span class="line">        dbs.reverse()</span><br><span class="line">        dWs.reverse()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(many):</span><br><span class="line">            Ws[j] -= alpha*dWs[j]</span><br><span class="line">            bs[j] -= alpha*dbs[j]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DNN(X,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br></pre></td></tr></table></figure><pre><code>18.1302727553386876.0588872901929935.8514923697354075.6495504568988235.4403677157870594.9279643843454844.4397446981455684.3060410409799014.2790307703468784.268710671371014</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>机器学习</tag>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>决策树</title>
    <link href="/2021/11/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    <url>/2021/11/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%86%B3%E7%AD%96%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>自己定义树类，然后通过递归构建树，再用递归输出if-then判断语句<br>这个决策树写得一字千金</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;胸痛&#x27;</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],<span class="string">&#x27;男性&#x27;</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],<span class="string">&#x27;抽烟&#x27;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">    ,<span class="string">&#x27;锻炼&#x27;</span>:[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;心脏病&#x27;</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]&#125;</span><br><span class="line">data = pd.DataFrame(a)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>胸痛</th>      <th>男性</th>      <th>抽烟</th>      <th>锻炼</th>      <th>心脏病</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>1</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>5</th>      <td>0</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecisionTree</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data, name2=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.name = <span class="literal">None</span> <span class="comment">#之后用哪个特征来分类</span></span><br><span class="line">        self.name2 = name2 <span class="comment">#这是之前分类的哪个情况分支</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(data.columns) == <span class="number">2</span> <span class="keyword">or</span> <span class="built_in">len</span>(data[<span class="string">&#x27;心脏病&#x27;</span>].unique())==<span class="number">1</span>:</span><br><span class="line">            self.val = data[<span class="string">&#x27;心脏病&#x27;</span>].value_counts().index[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">count1</span>(<span class="params">aSeries</span>):</span></span><br><span class="line">                a = aSeries.value_counts(normalize=<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">return</span> -np.log2(a).dot(a)</span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">cal_ent</span>(<span class="params">data, i</span>):</span></span><br><span class="line">                a = data.groupby(i).agg(&#123;<span class="string">&#x27;心脏病&#x27;</span>:count1&#125;)</span><br><span class="line">                a[<span class="string">&#x27;比率&#x27;</span>] = data[<span class="string">&#x27;心脏病&#x27;</span>].value_counts(normalize=<span class="literal">True</span>)</span><br><span class="line">                ent_tep = (a[<span class="string">&#x27;心脏病&#x27;</span>]*a[<span class="string">&#x27;比率&#x27;</span>]).<span class="built_in">sum</span>()</span><br><span class="line">                <span class="keyword">return</span> i,ent_tep</span><br><span class="line"></span><br><span class="line">            Ents = [cal_ent(data, i) <span class="keyword">for</span> i <span class="keyword">in</span> data.columns[:-<span class="number">1</span>]]    <span class="comment">#每个特征计算一次混乱程度   </span></span><br><span class="line">            self.name = <span class="built_in">sorted</span>(Ents, key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])[<span class="number">0</span>][<span class="number">0</span>]  <span class="comment">#混乱程度最小的也就是信息增益g最大的特征的名字</span></span><br><span class="line">            self.val = [DecisionTree(data = data.drop(columns=self.name)[data[self.name]==i],</span><br><span class="line">                                     name2 = i)</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> data[self.name].unique()] <span class="comment">#递归进行计算</span></span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">struc</span>(<span class="params">self</span>):</span> <span class="comment">#使用递归进行if then判断</span></span><br><span class="line">        <span class="keyword">if</span> self.name:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;按照&#x27;</span>+self.name+<span class="string">&#x27;进行分类&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.val:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;如果是&#x27;</span>, i.name2)</span><br><span class="line">                i.struc()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;那么结果就是&#x27;</span>, self.val)</span><br><span class="line">a = DecisionTree(data)</span><br><span class="line">a.struc()</span><br></pre></td></tr></table></figure><pre><code>按照胸痛进行分类如果是 1那么结果就是 1如果是 0按照男性进行分类如果是 0那么结果就是 1如果是 1那么结果就是 0</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计量笔记2（系数）</title>
    <link href="/2021/10/26/%E8%AE%A1%E9%87%8F%E7%AC%94%E8%AE%B02/"/>
    <url>/2021/10/26/%E8%AE%A1%E9%87%8F%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<p>计量的小笔记2</p><span id="more"></span><h1 id="系数"><a href="#系数" class="headerlink" title="系数"></a>系数</h1><h2 id="边际效应和弹性"><a href="#边际效应和弹性" class="headerlink" title="边际效应和弹性"></a>边际效应和弹性</h2><p>$$<br>f(y) = g(x)\<br>df = dg\<br>\frac {dy}y = \beta dx<br>$$</p><p>$x$增长一个单位，$y$会增长$\beta$倍</p><h2 id="U型和倒U型"><a href="#U型和倒U型" class="headerlink" title="U型和倒U型"></a>U型和倒U型</h2><p>经济意义是适量特征。但即便二次系数显著，也不能说明形状，因为可能对称轴负数</p><h2 id="动态效应"><a href="#动态效应" class="headerlink" title="动态效应"></a>动态效应</h2><p>$$<br>Y_t = \beta_1+\beta_2Y_{t-1}+\beta_3X_t+u_t<br>$$</p><h3 id="短期效应和长期效应"><a href="#短期效应和长期效应" class="headerlink" title="短期效应和长期效应"></a>短期效应和长期效应</h3><p>固定其他因素不变，…短期来说/长期来说，$Y$的平均值增加$\beta_3$/$\frac {\beta_3}{1-\beta_2}$个单位</p><h4 id="beta-3-1-beta-2-的出处"><a href="#beta-3-1-beta-2-的出处" class="headerlink" title="$\beta_3 / (1-\beta_2)$的出处"></a>$\beta_3 / (1-\beta_2)$的出处</h4><p>第一种是等比数列，第二种是我也不知道</p><h2 id="交互效应和调节效应"><a href="#交互效应和调节效应" class="headerlink" title="交互效应和调节效应"></a>交互效应和调节效应</h2><p>本质就是边际效应会变化，边际效应的边际效应。称为协同变量。如果不关心调节变量，比如它是根本无法改变的，协变量就会退化为调节变量。</p><h2 id="中介效应"><a href="#中介效应" class="headerlink" title="中介效应"></a>中介效应</h2>]]></content>
    
    
    
    <tags>
      
      <tag>上课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计量笔记1（Stata使用）</title>
    <link href="/2021/10/14/%E8%AE%A1%E9%87%8F%E7%AC%94%E8%AE%B01/"/>
    <url>/2021/10/14/%E8%AE%A1%E9%87%8F%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<p>计量笔记1——Stata使用</p><span id="more"></span><h1 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h1><ol><li>直接导入</li><li>复制粘贴</li><li>变量管理器可以修改和管理变量名称，但我没找到</li><li>左上角保存是保存数据，不是保存代码</li></ol><h1 id="描述性统计"><a href="#描述性统计" class="headerlink" title="描述性统计"></a>描述性统计</h1><p><code>describe</code>/<code>d</code>查看特征类型，顺便查看观测数量和变量个数</p><p><code>list</code>/<code>l</code>完整查看特征</p><p><code>drop</code>与<code>keep</code>后面必须加上<code>if</code>用来删除或者保留记录/行</p><p>​    小技巧批量变量 <code>x1-x10</code></p><p>​    小技巧正则表达式 <code>ln*</code></p><p><code>summarize</code>/<code>s</code>类似于<code>.describe()</code>，进行描述性统计，输出观测数量，均值，标准差，最大最小值</p><p>​    接<code>return list</code>更详细地显示刚刚<code>summarize</code>的最后一个特征，多个方差、求和，还有个我没看懂的<code>sum_w</code></p><p>​        后面回归里有一个类似的语句 <code>ereturn list</code> 用来显示回归里的数据</p><p>累计分布<code>tabulate</code>/<code>ta</code>，一次只能对一列使用</p><p>协方差矩阵<code>pwcorr</code> <code>x1 x2 x3</code> <code>, sig star(0.05)</code></p><h2 id="作图"><a href="#作图" class="headerlink" title="作图"></a>作图</h2><p>作直方图<code>histogram</code>/<code>hist</code> <code>x1</code> <code>,width(25000) frequency</code></p><p>核密度图 <code>kdensity</code> <code>x1</code>，好像就是把直方图变成了一条线</p><p>散点图 <code>sc</code>/<code>scatter</code> <code>y x</code></p><p>线性拟合图 <code>lfit</code> <code>y x</code></p><p>两个图合在一起 <code>twoway</code> <code>(sc y x)</code> <code>(lfit y x)</code></p><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><p>生成新变量 <code>g</code>/<code>generate</code> <code>logx</code> <code>=log(x)</code> <code>=x^2</code> <code>=x1*x2</code> </p><p>生成虚拟变量 <code>g x2=(x&gt;1)</code></p><p>重命名变量 <code>ren</code>/<code>rename</code> <code>asdf</code> <code>x</code></p><p>覆盖变量 <code>replace</code> <code>x = x^2</code></p><h1 id="推断统计"><a href="#推断统计" class="headerlink" title="推断统计"></a>推断统计</h1><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p><code>reg</code>/<code>regress</code> <code>y x1 x2 x3</code> <code>,noconstant</code> <code>if x1&gt;100</code> <code>if large</code> <code>if large==0</code>/<code>if ~large</code></p><p>可以不加常数项，但没必要</p><h2 id="将结果输出到Word"><a href="#将结果输出到Word" class="headerlink" title="将结果输出到Word"></a>将结果输出到Word</h2><p>先下载，只需要下载一次就好 <code>ssc install asdoc</code></p><p><code>asdoc reg y x</code> <code>, nest replace/append</code></p><p><code>replace</code> 会覆盖掉之前的回归数据，<code>append</code>就是跟在后面。<code>nest</code>是将回归系数放成一列竖着的，方便多个模型对比</p><h2 id="作图-1"><a href="#作图-1" class="headerlink" title="作图"></a>作图</h2><p>拟合回归线 <code>avplot x1</code></p><p>全都要拟合 <code>avplots</code></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>回归系数协方差矩阵 <code>vce</code></p><p>生成预测值和残差 <code>predict yhat</code> <code>predict resid</code> <code>,residual</code>/<code>r</code></p><p>展示回归系数的函数形式 <code>display _b[x1]</code></p><p>==备注== <u>有程序了就尽量用稳健的标准误</u></p><h2 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h2><h3 id="F检验"><a href="#F检验" class="headerlink" title="F检验"></a>F检验</h3><p><code>te</code>/ <code>test</code> <code>x1=1</code>/ <code>(_cons=1)(x1+x2=1)</code>/ <code>x1 x2</code></p><p>上面是直接写变量，也可以写变量的系数 <code>_b[x1]+_b[x2]=1</code>但是就慢了</p><h3 id="wald检验"><a href="#wald检验" class="headerlink" title="wald检验"></a>wald检验</h3><p><code>testnl</code> <code>_b[x1]+_b[x2]=1</code></p><p>这时候就必须写变量的系数了。</p><p>上面这两个检验都是在进行无约束回归。下面的检验是要先计算约束回归</p><h3 id="约束回归"><a href="#约束回归" class="headerlink" title="约束回归"></a>约束回归</h3><p>定义约束  <code>cons</code>/<code>constraint def 1 </code> <code> x1+x2=1</code></p><p><code>cons def 2 </code> <code>_cons=1</code></p><p>进行回归</p><p><code>cnsreg y x1 x2, c(1-2)</code></p><p>另外两大检验代码有点多，需要用的时候再说吧</p>]]></content>
    
    
    
    <tags>
      
      <tag>上课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计量笔记3（OLS）</title>
    <link href="/2021/10/08/%E8%AE%A1%E9%87%8F%E7%AC%94%E8%AE%B03/"/>
    <url>/2021/10/08/%E8%AE%A1%E9%87%8F%E7%AC%94%E8%AE%B03/</url>
    
    <content type="html"><![CDATA[<p>计量的小笔记3</p><span id="more"></span><h1 id="小样本OLS"><a href="#小样本OLS" class="headerlink" title="小样本OLS"></a>小样本OLS</h1><h2 id="模型假设"><a href="#模型假设" class="headerlink" title="模型假设"></a>模型假设</h2><p>$$<br>Y = X\beta + \epsilon<br>$$</p><p>$X_{m\times n}$每一行是一条记录/个人，如果模型有常数项，那么一般约定$x_1=1$</p><h3 id="严格外生性假设"><a href="#严格外生性假设" class="headerlink" title="严格外生性假设"></a>严格外生性假设</h3><p>$$<br>E(\epsilon_i|X) = 0\X=(x_1,x_2,…,x_n)<br>$$</p><p>扰动项的条件期望等于0。这意味着$\epsilon$和$X$可能不是独立的，可能改变$\epsilon$的分布。</p><p>可以推出$X$和$\epsilon$不相关。<br>$$<br>Cov(\epsilon_i,X_{jk})=E(\epsilon_iX_{jk}) - E(\epsilon_i)E(X_{jk})<br>$$</p><blockquote><p>我觉得上面这个公式里$\epsilon$不应该加$i$，因为所有$Y_i$加的是同一个$\epsilon$，之所以异方差balabala是因为$X_i$变化了</p></blockquote><p>$$<br>E(\epsilon) = 条件期望的期望 = 0<br>$$</p><p>故上式等于<br>$$<br>Cov(\epsilon,X_{jk}) = E(\epsilon X_{jk}) = \int\int x\epsilon \ f(x,\epsilon)dxd\epsilon\=\int\int x\epsilon \ f(x)f(\epsilon |x)dxd\epsilon=\int xf(x)\int \epsilon f(\epsilon |x)d\epsilon \ dx = 0<br>$$</p><h3 id="无严格多重共线性假设"><a href="#无严格多重共线性假设" class="headerlink" title="无严格多重共线性假设"></a>无严格多重共线性假设</h3><p>一般不存在，特别是样本量很大就更难存在了，一般是虚拟变量多了还存在常数项。造成的问题是后面$b = (X^TX)^{-1}X^Ty$中$X^TX$将不可逆。</p><h3 id="球形扰动项假设"><a href="#球形扰动项假设" class="headerlink" title="球形扰动项假设"></a>球形扰动项假设</h3><p>$$<br>Var(\epsilon|X) = E(\epsilon \epsilon^T|X) = \sigma ^2I_n = \begin{pmatrix} \sigma^2&amp;0&amp;0&amp;0\0&amp;\sigma^2&amp;0&amp;0\0&amp;0&amp;\sigma^2&amp;0\0&amp;0&amp;0&amp;\sigma^2 \end{pmatrix}<br>$$</p><h2 id="代数推导"><a href="#代数推导" class="headerlink" title="代数推导"></a>代数推导</h2><p>$$<br>e_i=Y-X\hat\beta\<br>SSR = e_i^Te_i = (Y^T-\hat\beta^TX^T)(Y-X\hat\beta) = Y^TY-Y^TX\hat\beta-\hat\beta^TX^TY+\hat\beta^TX^TX\hat\beta = \Y^TY-2Y^TX\hat\beta+\hat\beta^TX^TX\hat\beta<br>$$</p><p>求梯度$\nabla SSR$，再令梯度为0:<br>$$<br>\nabla SSR = -2X^TY+2X^TX\hat\beta\<br>-2X^TY+2X^TX\hat\beta = 0 \to X^TY = X^TX\hat\beta\<br>\hat\beta = (X^TX)^{-1}X^TY<br>$$<br>最后根据$X^TX$可逆得到了答案。但还不严谨，这个只能证明是驻点，所以继续求海森矩阵$\nabla ^2 SSR$<br>$$<br>\nabla ^2 SSR = 2X^TX<br>$$<br>显然是正定的，因为$u^TX^TXu = (Xu,Xu)$。</p><h2 id="几何解释"><a href="#几何解释" class="headerlink" title="几何解释"></a>几何解释</h2><p>根据$\hat Y = X\hat\beta = Xb = X(X^TX)^{-1}X^TY$，表明了$\hat Y$是$Y$的线性组合，称$X(X^TX)^{-1}X^T$为投影矩阵$P$。用矩阵$P$左乘向量$a$，即$Pa$。</p><h2 id="拟合优度"><a href="#拟合优度" class="headerlink" title="拟合优度"></a>拟合优度</h2><p>定义离差平方和<br>$$<br>SST = \sum^n_{i=1}(Y_i-\bar Y)^2\<br>=\sum^n_{i=1}(Y_i-\hat Y_i+\hat Y_i -\bar Y)^2=\sum^n_{i=1}(Y_i-\hat Y_i)^2+\sum^n_{i=1}(\hat Y_i-\bar Y)^2 + 2\sum^n_{i=1}(Y_i-\hat Y_i)(\hat Y_i-\bar Y)=\<br>\sum^n_{i=1}e_i^2+\sum^n_{i=1}(\hat Y_i-\bar Y)^2 + 2\sum^n_{i=1}e_i(\hat Y_i-\bar Y)=\<br>To \ Be\  Continue…<br>$$<br>根据梯度为0可得<br>$$<br>X^TY = X^TX\hat\beta\<br>X^T(Y - X\hat\beta) = 0\<br>X^Te=0<br>$$<br>==若存在常数项==，则$X$第一列全为1，$X^T$第一行全为1，可得$(1,1,1…1)e=0$​，即==残差项之和为0==。于是又有<br>$$<br>\sum \hat Y_i = \sum (Y_i-e_i) = \sum Y_i \to \bar {\hat Y} = \bar Y\<br>\because \bar {\hat Y} = \bar X\hat\beta \<br>\therefore (\hat Y_i-\bar Y) = (X_i-\bar X)\hat \beta<br>$$<br>所以之前没写完的公式<br>$$<br>\sum^n_{i=1}e_i(\hat Y_i-\bar Y) = e^T(\hat Y-\bar Y) = e^T(X-\bar X)\hat\beta<br>\ （1\times m\ m \times n\ n\times1）\<br>=e^TX\hat\beta - e^T\bar X\hat\beta \to 根据梯度为0的结论\to = - e^T\bar X\hat\beta =- e^T\begin{pmatrix}1\1\1\1 \end{pmatrix}\bar X\hat\beta = 0\<br>最后这个\bar X是一个行向量，之前的所有\bar X 是把这一行复制了m列的m\times n矩阵<br>$$</p>]]></content>
    
    
    
    <tags>
      
      <tag>上课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在Github搭建Hexo博客</title>
    <link href="/2021/09/01/%E5%85%B6%E4%BB%96%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo/"/>
    <url>/2021/09/01/%E5%85%B6%E4%BB%96%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo/</url>
    
    <content type="html"><![CDATA[<p>博客第一篇文章，如何搭建博客</p><span id="more"></span><h1 id="构建Hexo的五个步骤"><a href="#构建Hexo的五个步骤" class="headerlink" title="构建Hexo的五个步骤"></a>构建Hexo的五个步骤</h1><h2 id="下载Node-js和git"><a href="#下载Node-js和git" class="headerlink" title="下载Node.js和git"></a>下载Node.js和git</h2><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><ul><li>安装Node.js一直next就可以了，这里的安装每个版本都不一样，慢慢看着来吧。如果之后显示没有这个指令再重装。</li></ul><ul><li><p>在CMD里验证一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br><span class="line">npm install hexo-cli -g       #在CMD里顺便就把hexo安装好了</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure></li></ul><h2 id="注册github，建仓库"><a href="#注册github，建仓库" class="headerlink" title="注册github，建仓库"></a>注册github，建仓库</h2><p>注册好账号，Create a new repository，要注意仓库名字必须是 账户名.github.io，并且勾选Add a README file<br>这个账户名.github.io之后就是访问的网址，比如cmdsmild.github.io</p><h2 id="SSH-key"><a href="#SSH-key" class="headerlink" title="SSH key"></a>SSH key</h2><ul><li><p>随便进入一个文件夹右键，Git Bash，在黑框里输入代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh</span><br><span class="line">ssh-keygen -t rsa -C &quot;注册邮箱&quot;</span><br></pre></td></tr></table></figure></li><li><p>注册邮箱就是<a href="mailto:&#56;&#48;&#x37;&#51;&#x33;&#x38;&#54;&#x36;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#109;">&#56;&#48;&#x37;&#51;&#x33;&#x38;&#54;&#x36;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#109;</a> 然后按四次回车</p></li><li><p>在C盘，用户，Administrator 文件夹有一个.ssh文件夹，里面有一个id_rsa.pub，用txt打开复制里面的内容<br>回到Github，右上角头像旁边的小三角，进入Setting，接着左边栏里有SSH and GPG keys。</p></li><li><p>右上角在SSH keys新建一个钥匙，Title随便改，下面大框框粘贴</p></li><li><p>回到黑框框，输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com </span><br></pre></td></tr></table></figure></li><li><p>输入<code>yes</code> 检查是否绑定成功，他会回复你<code>Hi~</code></p></li></ul><h2 id="生成本地博客"><a href="#生成本地博客" class="headerlink" title="生成本地博客"></a>生成本地博客</h2><ul><li><p>在D盘新建一个文件夹，然后右键打开黑框框</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init         #先初始化一下</span><br><span class="line">hexo g       #生成html文件</span><br><span class="line">hexo s        #打开本地服务器</span><br></pre></td></tr></table></figure></li></ul><h2 id="把本地文件上传到github"><a href="#把本地文件上传到github" class="headerlink" title="把本地文件上传到github"></a>把本地文件上传到github</h2><ul><li>先在文件夹里打开_config文件，把最后变成<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/cmdsmile/cmdsmile.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li>接着在这个文件夹里右键打开黑框框输入 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo d </span><br></pre></td></tr></table></figure></li><li>如果弹出来 Please tell me who you are 的报错，在你的文件夹里找到隐藏的.git文件夹。注意这个文件夹是隐藏的，显示隐藏出来就行。打开文件夹里的config文件，添加这三行到文件：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">    name = 您的用户名</span><br><span class="line">    email = 您的邮箱账号</span><br></pre></td></tr></table></figure></li><li>重新<code>hexo d</code> 会让你输入令牌，于是进入github的设置，左边有一个Developer setting，在Personal access tokens里新建一个令牌，名字随便起，但下面全都要打勾。<br>注意，这个令牌要妥善保存，因为只能看到一次。最好粘贴发送给手机。</li></ul><h2 id="只要上传到github的仓库就大功告成！"><a href="#只要上传到github的仓库就大功告成！" class="headerlink" title="只要上传到github的仓库就大功告成！"></a>只要上传到github的仓库就大功告成！</h2>]]></content>
    
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
